/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Any configuration defined within this object will force override existing settings
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration to use in onboarding PRs
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * A configuration object containing configuration encrypted with project key.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration specifically for `package.json`>`engines`
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration to apply when an update type is major
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration to apply when an update type is minor
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration to apply when an update type is patch. Only applies if `separateMinorPatch` is set to true
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration to apply when an update type is pin.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration to apply when updating a digest (no change in tag/version)
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Config to apply when a PR is necessary due to vulnerability of existing package version.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration for lock file maintenance
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Config if groupName is enabled
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for javascript language
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for npm package.json renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for meteor package.js renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for bazel WORKSPACE renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for buildkite pipeline renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for Go language
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for Go modules renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for ruby language
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for bundler Gemfiles
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for Terraform module renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration option for Rust package management.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for Cargo crate renovation.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for node version renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for .travis.yml node version renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for .nvmrc files
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for Docker language
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for Docker Compose renovation. Also inherits settings from `docker` object.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for Dockerfile renovation
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for Kubernetes renovation. Also inherits settings from `docker` object.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for CircleCI yml renovation. Also inherits settings from `docker` object.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for Ansible yaml renovation. Also inherits settings from `docker` object.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for GitHub Actions workflow renovation. Also inherits settings from `docker` object.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for composer.json files
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for php
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for requirements.txt files
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for setup.py files
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for Pipfile files
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for python
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for compatibility
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for all Java package managers
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for build.gradle files
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for gradle-wrapper.properties files
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for when renovating Maven pom.xml files
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for GitLab CI yml renovation. Also inherits settings from `docker` object.
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for .NET language
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Configuration object for C#/Nuget
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}
/**
 * Table column definitions for use in PR tables
 */
export interface JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49 {
    /**
     * Configuration presets to use/extend. Note: does not work if configured in config.js
     */
    extends?: string[]
    /**
     * A list of presets to ignore, including nested ones inside `extends`
     */
    ignorePresets?: string[]
    /**
     * Plain text description for a config or preset
     */
    description?: string[]
    /**
     * Enable or disable Renovate
     */
    enabled?: boolean
    force?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom1
    /**
     * Whether CLI configuration options should be moved to the `force` config section
     */
    forceCli?: boolean
    /**
     * If enabled, perform a dry run by logging messages instead of creating/updating/deleting branches and PRs
     */
    dryRun?: boolean
    /**
     * If enabled, log the full resolved config for each repo, including resolved presets
     */
    printConfig?: boolean
    /**
     * Where to source binaries like `npm` and `yarn` from, choices are `bundled`, `global` and `docker`
     */
    binarySource?: string
    /**
     * Logging level
     */
    logLevel?: string
    /**
     * Log file path
     */
    logFile?: string
    /**
     * Log file log level
     */
    logFileLevel?: string
    /**
     * Require a Configuration PR first
     */
    onboarding?: boolean
    onboardingConfig?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom2
    /**
     * Whether to process forked repositories or not. By default, all forked repositories are skipped over.
     */
    includeForks?: boolean
    /**
     * Set to true to fork the source repository and create branches there instead
     */
    forkMode?: boolean
    /**
     * Set to true if repositories must have a config to activate.
     */
    requireConfig?: boolean
    /**
     * Server-side private key
     */
    privateKey?: string
    encrypted?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom3
    /**
     * [IANA Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string
    /**
     * Times of day/week to limit branch creation to
     */
    schedule?: string[]
    /**
     * Whether to update (but not create) branches when not scheduled
     */
    updateNotScheduled?: boolean
    /**
     * Use git for FS operations instead of API. GitHub only.
     */
    gitFs?: 'https' | 'http' | 'ssh'
    /**
     * Set this to "high" if the bot should trust the repository owners/contents
     */
    trustLevel?: string
    /**
     * Platform type of repository
     */
    platform?: string
    /**
     * Custom endpoint to use
     */
    endpoint?: string
    /**
     * Repository Auth Token
     */
    token?: string
    /**
     * Username for authentication. Currently Bitbucket only
     */
    username?: string
    /**
     * Password for authentication. Currently Bitbucket only (AppPassword).
     */
    password?: string
    /**
     * String copy of npmrc file. Use \n instead of line breaks
     */
    npmrc?: string
    /**
     * npm token used for authenticating with the default registry
     */
    npmToken?: string
    /**
     * String copy of yarnrc file. Use \n instead of line breaks
     */
    yarnrc?: string
    /**
     * Set to false to disable lock file updating
     */
    updateLockFiles?: boolean
    /**
     * Skip installing modules/dependencies if lock file updating is possible alone
     */
    skipInstalls?: boolean
    /**
     * Whether to ignore any .npmrc file found in repository
     */
    ignoreNpmrcFile?: boolean
    /**
     * Autodiscover all repositories
     */
    autodiscover?: boolean
    /**
     * Filter the list of autodiscovered repositories
     */
    autodiscoverFilter?: string
    /**
     * List of Repositories
     */
    repositories?: any[]
    /**
     * An array of one or more custom base branches to be processed. If left empty, the default branch will be chosen
     */
    baseBranches?: any[]
    /**
     * Author to use for git commits. RFC5322
     */
    gitAuthor?: string
    /**
     * PGP key to use for signing git commits
     */
    gitPrivateKey?: string
    /**
     * A list of package managers to enable. If defined, then all managers not on the list are disabled.
     */
    enabledManagers?: any[]
    /**
     * Include package files only within these defined paths
     */
    includePaths?: string[]
    /**
     * Skip any package.json whose path matches one of these. Can be string or glob pattern
     */
    ignorePaths?: string[]
    engines?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom4
    /**
     * List of URLs to try for dependency lookup. Package manager-specific
     */
    registryUrls?: string[]
    /**
     * Version scheme to use for filtering and comparisons
     */
    versionScheme?:
        | 'cargo'
        | 'composer'
        | 'docker'
        | 'hashicorp'
        | 'hex'
        | 'loose'
        | 'maven'
        | 'node'
        | 'npm'
        | 'pep440'
        | 'ruby'
        | 'semver'
    /**
     * Dependencies to ignore
     */
    ignoreDeps?: string[]
    /**
     * Rules for matching package names
     */
    packageRules?: {
        /**
         * List of languages to match (e.g. ["python"]). Valid only within `packageRules` object
         */
        languages?: string[]
        /**
         * List of branches to match (e.g. ["master"]). Valid only within `packageRules` object
         */
        baseBranchList?: string[]
        /**
         * List of package managers to match (e.g. ["pipenv"]). Valid only within `packageRules` object
         */
        managers?: string[]
        /**
         * List of datasources to match (e.g. ["orb"]). Valid only within `packageRules` object
         */
        datasources?: string[]
        /**
         * List of depTypes to match (e.g. [`peerDependencies`]). Valid only within `packageRules` object
         */
        depTypeList?: string[]
        /**
         * Package names to match. Valid only within `packageRules` object
         */
        packageNames?: string[]
        /**
         * Package names to exclude. Valid only within `packageRules` object
         */
        excludePackageNames?: string[]
        /**
         * Package name patterns to match. Valid only within `packageRules` object.
         */
        packagePatterns?: string[]
        /**
         * Package name patterns to exclude. Valid only within `packageRules` object.
         */
        excludePackagePatterns?: string[]
        /**
         * A version or version range to match against the current version of a package. Valid only within `packageRules` object
         */
        matchCurrentVersion?: string
        /**
         * A list of source URL prefixes to match against, commonly used for grouping of monorepos or packages from the same organization.
         */
        sourceUrlPrefixes?: string[]
        /**
         * Update types to match against (major, minor, pin, etc). Valid only within `packageRules` object.
         */
        updateTypes?: ('major' | 'minor' | 'patch' | 'pin' | 'digest' | 'lockFileMaintenance' | 'rollback' | 'bump')[]
        /**
         * List of strings or glob patterns to match against package files. Applicable inside packageRules only
         */
        paths?: string[]
        /**
         * A semver range defining allowed versions for dependencies
         */
        allowedVersions?: string
        [k: string]: any
    }[]
    /**
     * Whether to add digests to Dockerfile source images
     */
    pinDigests?: boolean
    /**
     * If set to false, it will upgrade dependencies to latest release only, and not separate major/minor branches
     */
    separateMajorMinor?: boolean
    /**
     * If set to true, PRs will be raised separately for each available major upgrade version
     */
    separateMultipleMajor?: boolean
    /**
     * If set to true, it will separate minor and patch updates into separate branches
     */
    separateMinorPatch?: boolean
    /**
     * Ignore versions with unstable semver
     */
    ignoreUnstable?: boolean
    /**
     * Ignore deprecated versions unless the current version is deprecated
     */
    ignoreDeprecated?: boolean
    /**
     * Regex for identifying unstable versions (docker only)
     */
    unstablePattern?: string
    /**
     * If defined, packages will follow this release tag exactly.
     */
    followTag?: string
    /**
     * Ignore versions newer than npm "latest" version
     */
    respectLatest?: boolean
    /**
     * Policy for how to modify/update existing ranges.
     */
    rangeStrategy?: 'auto' | 'pin' | 'bump' | 'replace' | 'widen' | 'update-lockfile'
    /**
     * Prefix to use for all branch names
     */
    branchPrefix?: string
    /**
     * Bump the version in the package.json being updated
     */
    bumpVersion?: 'major' | 'minor' | 'patch'
    major?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom5
    minor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom6
    patch?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom7
    pin?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom8
    digest?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom9
    /**
     * Enable semantic commit prefixes for commits and PR titles
     */
    semanticCommits?: boolean
    /**
     * Commit type to use if semantic commits is enabled
     */
    semanticCommitType?: string
    /**
     * Commit scope to use if semantic commits are enabled
     */
    semanticCommitScope?: string
    /**
     * Create PRs to roll back versions if the current version is not found in the registry
     */
    rollbackPrs?: boolean
    /**
     * Recreate PRs even if same ones were closed previously
     */
    recreateClosed?: boolean
    /**
     * Rebase stale PRs (GitHub only)
     */
    rebaseStalePrs?: boolean
    /**
     * Label to use to request the bot to rebase a PR manually (GitHub only)
     */
    rebaseLabel?: string
    /**
     * Set a verify status check for all PRs
     */
    statusCheckVerify?: boolean
    /**
     * Set a status check for unpublish-safe upgrades
     */
    unpublishSafe?: boolean
    /**
     * When to create the PR for a branch.
     */
    prCreation?: 'immediate' | 'not-pending' | 'status-success'
    /**
     * Timeout in hours for when prCreation=not-pending
     */
    prNotPendingHours?: number
    /**
     * Rate limit PRs to maximum x created per hour. 0 (default) means no limit.
     */
    prHourlyLimit?: number
    /**
     * Limit to a maximum of x concurrent branches/PRs. 0 (default) means no limit.
     */
    prConcurrentLimit?: number
    /**
     * Whether to automerge branches/PRs automatically, without human intervention
     */
    automerge?: boolean
    /**
     * How to automerge, if enabled.
     */
    automergeType?: 'branch' | 'pr' | 'pr-comment'
    /**
     * PR comment to add to trigger automerge. Used only if automergeType=pr-comment
     */
    automergeComment?: string
    /**
     * List of status checks that must pass before automerging. Set to null to enable automerging without tests.
     */
    requiredStatusChecks?: string[]
    vulnerabilityAlerts?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom10
    /**
     * Branch name template
     */
    branchName?: string
    /**
     * Branch manager prefix
     */
    managerBranchPrefix?: string
    /**
     * Branch topic
     */
    branchTopic?: string
    /**
     * Message to use for commit messages and pull request titles
     */
    commitMessage?: string
    /**
     * Commit message body template. Will be appended to commit message, separated by two line returns.
     */
    commitBody?: string
    /**
     * Prefix to add to start of commit messages and PR titles. Uses a semantic prefix if semanticCommits enabled
     */
    commitMessagePrefix?: string
    /**
     * Action verb to use in commit messages and PR titles
     */
    commitMessageAction?: string
    /**
     * The upgrade topic/noun used in commit messages and PR titles
     */
    commitMessageTopic?: string
    /**
     * Extra description used after the commit message topic - typically the version
     */
    commitMessageExtra?: string
    /**
     * Suffix to add to end of commit messages and PR titles.
     */
    commitMessageSuffix?: string
    /**
     * Pull Request title template (deprecated). Now uses commitMessage.
     */
    prTitle?: string
    /**
     * Pull Request footer template
     */
    prFooter?: string
    lockFileMaintenance?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom11
    /**
     * Use group names only when multiple dependencies upgraded
     */
    lazyGrouping?: boolean
    /**
     * Human understandable name for the dependency group
     */
    groupName?: string
    /**
     * Slug to use for group (e.g. in branch name). Will be calculated from groupName if null
     */
    groupSlug?: string
    group?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom12
    /**
     * Labels to add to Pull Request
     */
    labels?: string[]
    /**
     * Assignees for Pull Request (username in GitHub/GitLab, email address in Azure DevOps)
     */
    assignees?: string[]
    /**
     * Requested reviewers for Pull Requests (username in GitHub/GitLab, email or username in Azure DevOps)
     */
    reviewers?: string[]
    /**
     * JS RegExp pattern for matching manager files
     */
    fileMatch?: string[]
    js?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom13
    npm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom14
    meteor?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom15
    bazel?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom16
    buildkite?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom17
    golang?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom18
    gomod?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom19
    /**
     * Enable post-update options to be run after package/artifact updating
     */
    postUpdateOptions?: any[]
    ruby?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom20
    bundler?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom21
    terraform?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom22
    rust?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom23
    cargo?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom24
    /**
     * Dependency support policy, e.g. used for LTS vs non-LTS etc (node-only)
     */
    supportPolicy?: string[]
    node?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom25
    travis?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom26
    nvm?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom27
    docker?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom28
    'docker-compose'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom29
    dockerfile?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom30
    kubernetes?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom31
    circleci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom32
    ansible?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom33
    'github-actions'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom34
    composer?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom35
    php?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom36
    pip_requirements?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom37
    pip_setup?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom38
    pipenv?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom39
    python?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom40
    compatibility?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom41
    java?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom42
    gradle?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom43
    'gradle-wrapper'?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom44
    maven?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom45
    gitlabci?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom46
    dotnet?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom47
    nuget?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom48
    /**
     * Host rules/configuration including credentials
     */
    hostRules?: any[]
    prBodyDefinitions?: JsonSchemaForRenovateConfigFilesHttpsRenovatebotCom49
    /**
     * List of columns to use in PR bodies
     */
    prBodyColumns?: any[]
    /**
     * List of additional notes/templates to be included in the Pull Request bodies.
     */
    prBodyNotes?: string[]
    /**
     * Options to suppress various types of warnings and other notifications
     */
    suppressNotifications?: any[]
    [k: string]: any
}

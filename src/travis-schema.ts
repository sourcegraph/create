/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type JsonSchemaForTravisCiConfigurationFiles = Job & {
    notifications?: {
        webhooks?:
            | string[]
            | {
                  urls?: string
                  [k: string]: any
              }
        slack?:
            | SlackRoom
            | {
                  rooms?: SlackRoom[]
                  on_pull_requests?: boolean
                  template?: string[]
                  on_success?: NotificationFrequency
                  on_failure?: NotificationFrequency
              }
        email?:
            | string[]
            | false
            | {
                  recipients?: string[]
                  on_success?: 'always' | 'never' | 'change'
                  on_failure?: 'always' | 'never' | 'change'
                  [k: string]: any
              }
        irc?:
            | string
            | string[]
            | {
                  channels?: string[]
                  channel_key?: string
                  nick?: string
                  password?: string
                  template?: string[]
                  on_success?: 'always' | 'never' | 'change'
                  on_failure?: 'always' | 'never' | 'change'
                  skip_join?: boolean
                  use_notice?: boolean
                  [k: string]: any
              }
    }
    matrix?: {
        exclude?: Job[]
        include?: Job[]
        allow_failures?: Job[]
        /**
         * If some rows in the build matrix are allowed to fail, the build won’t be marked as finished until they have completed. To mark the build as finished as soon as possible, add fast_finish: true
         */
        fast_finish?: boolean
    }
    jobs?: {
        include?: (Job & {
            /**
             * The name of the build stage
             */
            stage?: string
            [k: string]: any
        })[]
    }
    /**
     * Specifies the order of build stages
     */
    stages?: (
        | string
        | {
              name?: string
              /**
               * Specifies a condition for the stage
               */
              if?: string
          }
    )[]
    [k: string]: any
}
export type PossiblySecretString =
    | string
    | {
          secure?: string
      }
export type Cache = 'bundler' | 'cargo' | 'ccache' | 'cocoapods' | 'packages' | 'pip' | 'yarn'
export type Service =
    | 'cassandra'
    | 'couchdb'
    | 'docker'
    | 'elasticsearch'
    | 'mariadb'
    | 'memcached'
    | 'mongodb'
    | 'mysql'
    | 'neo4j'
    | 'postgresql'
    | 'rabbitmq'
    | 'redis-server'
    | 'rethinkdb'
    | 'riak'
export type EnvVars = EnvVar | EnvVar[]
export type EnvVar =
    | string
    | {
          secure?: string
      }
export type Step = boolean | ('skip' | 'ignore') | string | string[]
export type Deployment = {
    on?: {
        /**
         * Tell Travis CI to only deploy on tagged commits
         */
        tags?: boolean
        branch?: string
        all_branches?: boolean
        /**
         * After your tests ran and before the release, Travis CI will clean up any additional files and changes you made. Maybe that is not what you want, as you might generate some artifacts that are supposed to be released, too.
         */
        skip_cleanup?: boolean
        [k: string]: any
    }
    [k: string]: any
} & (
    | {
          provider: 'script'
          script: string
          [k: string]: any
      }
    | {
          provider: 'npm'
          email: PossiblySecretString
          api_key: PossiblySecretString
          tag?: string
          [k: string]: any
      }
    | {
          provider: 'surge'
          project?: string
          domain?: string
          [k: string]: any
      }
    | {
          provider: 'releases'
          api_key?: PossiblySecretString
          user?: PossiblySecretString
          password?: PossiblySecretString
          file?: string | string[]
          file_glob?: boolean
          /**
           * If you need to overwrite existing files
           */
          overwrite?: boolean
          [k: string]: any
      }
    | {
          provider: 'heroku'
          /**
           * heroku auth token
           */
          api_key:
              | PossiblySecretString
              | {
                    [k: string]: PossiblySecretString
                }
          app?:
              | string
              | {
                    [k: string]: string
                }
          /**
           * to run a command on Heroku after a successful deploy
           */
          run?: string | string[]
          /**
           * Travis CI default will clean up any additional files and changes you made, you can by it to skip the clean up
           */
          skip_cleanup?: boolean
          /**
           * Travis CI supports different mechanisms for deploying to Heroku: api is default
           */
          strategy?: 'api' | 'git'
          [k: string]: any
      }
    | {
          provider: string
          [k: string]: any
      }
)
/**
 * Your account name, token and optional channel
 */
export type SlackRoom = string
export type NotificationFrequency = 'always' | 'never' | 'change'

export interface Job {
    language?:
        | 'android'
        | 'bash'
        | 'c'
        | 'c++'
        | 'clojure'
        | 'cpp'
        | 'crystal'
        | 'csharp'
        | 'd'
        | 'dart'
        | 'dartlang'
        | 'elixir'
        | 'erlang'
        | 'generic'
        | 'go'
        | 'golang'
        | 'groovy'
        | 'haskell'
        | 'haxe'
        | 'java'
        | 'javascript'
        | 'julia'
        | 'jvm'
        | 'minimal'
        | 'nix'
        | 'node'
        | 'node.js'
        | 'node_js'
        | 'nodejs'
        | 'obj-c'
        | 'obj_c'
        | 'objective-c'
        | 'objective_c'
        | 'perl'
        | 'perl6'
        | 'php'
        | 'python'
        | 'r'
        | 'ruby'
        | 'rust'
        | 'scala'
        | 'sh'
        | 'shell'
        | 'smalltalk'
    haxe?: string[]
    scala?: string[]
    sbt_args?: string
    crystal?: string[]
    neko?: string
    hxml?: string[]
    smalltalk?: string[]
    perl?: string[]
    perl6?: string[]
    d?: string[]
    dart?: string[]
    dart_task?: {
        test?: string
        install_dartium?: boolean
        xvfb?: boolean
        dartanalyzer?: boolean
        dartfmt?: boolean
        [k: string]: any
    }[]
    ghc?: string[]
    lein?: string
    android?: {
        components?: string[]
        licenses?: string[]
    }
    node_js?: string[] | string
    compiler?: ('clang' | 'gcc')[] | ('clang' | 'gcc')
    php?: string[] | string
    go?: string[] | string
    jdk?: string | string[]
    /**
     * When the optional solution key is present, Travis will run NuGet package restore and build the given solution.
     */
    solution?: string
    mono?: 'none' | string[]
    xcode_project?: string
    xcode_workspace?: string
    xcode_scheme?: string
    xcode_sdk?: string
    /**
     * By default, Travis CI will assume that your Podfile is in the root of the repository. If this is not the case, you can specify where the Podfile is
     */
    podfile?: string
    python?: string[] | string
    elixir?: string[] | string
    rust?: string[] | string
    erlang?: string[] | string
    julia?: string[] | string
    opt_release?: string[] | string
    rvm?: string[] | string
    gemfile?: string | string[]
    bundler_args?: string
    r?: string[] | string
    pandoc_version?: string
    /**
     * A list of packages to install via brew. This option is ignored on non-OS X builds.
     */
    brew_packages?: string[]
    r_binary_packages?: string[]
    r_packages?: string[]
    bioc_packages?: string[]
    r_github_packages?: string[]
    apt_packages?: string[]
    /**
     * CRAN mirror to use for fetching packages
     */
    cran?: string
    /**
     * Dictionary of repositories to pass to options(repos)
     */
    repos?: {
        [k: string]: string
    }
    /**
     * The operating system to run the job on
     */
    os?: ('osx' | 'linux') | ('osx' | 'linux')[]
    osx_image?:
        | 'xcode6.4'
        | 'xcode7.3'
        | 'xcode8.1'
        | 'xcode8.2'
        | 'xcode8.3'
        | 'xcode8'
        | 'xcode9.1'
        | 'xcode9'
        | 'xcode9.2'
        | 'xcode9.3beta'
    /**
     * The Ubuntu distribution to use
     */
    dist?: 'trusty' | 'precise'
    sudo?: 'required' | false
    addons?: {
        /**
         * To install packages not included in the default container-based-infrastructure you need to use the APT addon, as sudo apt-get is not available
         */
        apt?: {
            sources?: (
                | {
                      /**
                       * Key-value pairs which will be added to /etc/apt/sources.list
                       */
                      sourceline: string
                      /**
                       * When APT sources require GPG keys, you can specify this with key_url
                       */
                      key_url?: string
                  }
                | string
            )[]
            /**
             * To install packages from the package whitelist before your custom build steps
             */
            packages?: string[]
        }
        /**
         * If your build requires setting up custom hostnames, you can specify a single host or a list of them. Travis CI will automatically setup the hostnames in /etc/hosts for both IPv4 and IPv6.
         */
        hosts?: string[] | string
        artifacts?:
            | true
            | {
                  s3_region?: string
                  paths?: string[]
                  /**
                   * If you’d like to upload file from a specific directory, you can change your working directory
                   */
                  working_dir?: string
                  /**
                   * If you’d like to see more detail about what the artifacts addon is doing
                   */
                  debug?: boolean
                  [k: string]: any
              }
        /**
         * Firefox addon
         */
        firefox?: 'latest' | 'latest-esr' | 'latest-beta' | 'latest-dev' | 'latest-nightly' | 'latest-unsigned'
        /**
         * Chrome addon
         */
        chrome?: 'stable' | 'beta'
        /**
         * RethinkDB addon
         */
        rethinkdb?: string
        /**
         * PostgreSQL addon
         */
        postgresql?: string
        /**
         * MariaDB addon
         */
        mariadb?: string
        /**
         * Sauce Connect addon
         */
        sauce_connect?:
            | {
                  username?: string
                  access_key?: string
                  [k: string]: any
              }
            | boolean
        /**
         * JWT addon
         */
        jwt?: PossiblySecretString | PossiblySecretString[]
    }
    cache?:
        | false
        | Cache
        | Cache[]
        | {
              directories?: string[]
              /**
               * Upload timeout in seconds
               */
              timeout?: number
              bundler?: boolean
              cocoapods?: boolean
              pip?: boolean
              yarn?: boolean
              ccache?: boolean
              packages?: boolean
              cargo?: boolean
          }
    services?: Service | Service[]
    git?: {
        /**
         * Set the git clone depth
         */
        depth?: number
        /**
         * Control whether submodules should be cloned
         */
        submodules?: boolean
        /**
         * Skip fetching the git-lfs files during the initial git clone (equivalent to git lfs smudge --skip),
         */
        lfs_skip_smudge?: boolean
    }
    /**
     * Specify which branches to build
     */
    branches?: {
        except?: string[]
        only?: string[]
    }
    env?:
        | EnvVars
        | {
              global?: EnvVars
              matrix?: EnvVars
          }
    before_install?: Step
    install?: Step
    before_script?: Step
    script?: Step
    before_cache?: Step
    after_success?: Step
    after_failure?: Step
    before_deploy?: Step
    deploy?: Deployment[] | Deployment
    after_deploy?: Step
    after_script?: Step
    [k: string]: any
}
